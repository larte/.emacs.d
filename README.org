#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results siletn

#+BEGIN_SRC emacs-lisp
(require 'use-package)
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(defun require-package (package)
  "Install given PACKAGE."
  (unless (package-installed-p package)
    (unless (assoc package package-archive-contents)
      (package-refresh-contents))
    (package-install package)))
#+END_SRC


* Interface
  #+BEGIN_SRC emacs-lisp

   ;; hide menus and bars
   (menu-bar-mode 0)
   (tool-bar-mode 0)
   (scroll-bar-mode 0)
   (line-number-mode 1)
   (column-number-mode 1)

   (fset 'yes-or-no-p 'y-or-n-p)


   ;;
   (set-charset-priority 'unicode)
   (prefer-coding-system 'utf-8)
   (set-language-environment 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (set-keyboard-coding-system 'utf-8)
   (set-selection-coding-system 'utf-8)
   (setq buffer-file-coding-system 'utf-8)
   (setq locale-coding-system 'utf-8)

   ;; newlines
   (setq require-final-newline t)
   (add-hook 'before-save-hook 'delete-trailing-whitespace)

   ;; ido-buffer
   (require-package 'ibuffer)
   (require-package 'ibuffer-vc)
   (require 'ibuffer)
   (autoload 'ibuffer "ibuffer" "List buffers." t)

   (define-key global-map [(control b)] 'ibuffer)
   ;;(defvar ido-buffer-completion-map)
   ;;(define-key ido-buffer-completion-map [(control b)] 'ido-next-match)


   (add-hook 'ibuffer-hook
      (lambda ()
        (ibuffer-vc-set-filter-groups-by-vc-root)
        (unless (eq ibuffer-sorting-mode 'alphabetic)
         (ibuffer-do-sort-by-alphabetic))))

   ;; Use human readable Size column instead of original one
   (define-ibuffer-column size-h
     (:name "Size" :inline t)
     (cond
       ((> (buffer-size) 1000000) (format "%7.3fM" (/ (buffer-size) 1000000.0)))
       ((> (buffer-size) 1000) (format "%7.3fk" (/ (buffer-size) 1000.0)))
       (t (format "%8d" (buffer-size)))))

   (setq ibuffer-formats
       '((mark modified read-only vc-status-mini " "
              (name 18 18 :left :elide)
              " "
              (size-h 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              (vc-status 16 16 :left)
              " "
              filename-and-process)))



   (require-package 'tango-plus-theme)
   (use-package tango-plus-theme
     :config
     (load-theme 'tango-plus t))

   (use-package aggressive-indent
    :ensure t
    :config
     (global-aggressive-indent-mode 1)
     (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
    )

  #+END_SRC

* Extra packages
  #+BEGIN_SRC emacs-lisp
   (require-package 'dot-mode)
   (require-package 'elixir-mode)
   (require-package 'erlang)
   (require-package 'js2-mode)
   (require-package 'markdown-mode)
   (require-package 'nginx-mode)
   (require-package 'terraform-mode)
   (require-package 'yaml-mode)
   (require-package 'feature-mode)
   (require-package 'goovy-mode)
  #+END_SRC

* Search things
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
     :ensure t
     :bind
     (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map
      ("M-y" . ivy-next-line)))

     (use-package ivy
     :ensure t
     :diminish (ivy-mode)
     :bind (("C-x b" . ivy-switch-buffer))
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq ivy-count-format "%d/%d ")
     (setq ivy-display-style 'fancy))


     (use-package swiper
     :ensure t
     :bind (("C-s" . swiper-isearch)
      ("C-r" . swiper-isearch)
       ("C-c C-r" . ivy-resume)
        ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file))
     :config
     (progn
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
       ))

      ;; backups
      (setq backup-directory-alist
      `(("." . "~/.emacs-saves")))
      (setq delete-old-versions t
      kept-new-versions 5
      kept-old-versions 2
      version-control t)
      (setq backup-by-copying-when-linked t)

  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
     :ensure t
     :init
     (global-flycheck-mode t))
  #+END_SRC

* Parens

  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
     :ensure t
     :hook (prog-mode . smartparens-mode)
     :custom
      (sp-escape-quotes-after-insert nil)
     :config
     (require 'smartparens-config))

     (show-paren-mode t)
  #+END_SRC

* LSP

  #+BEGIN_SRC emacs-lisp
   (require-package 'lsp-mode)
   (use-package lsp-mode
    :ensure t
    :commands lsp
    :custom
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
    :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
    :hook ((python-mode c-mode c++-mode) . lsp))

    (require-package 'lsp-ui)
    (use-package lsp-ui
       :after lsp-mode
       :diminish
       :commands lsp-ui-mode
       :custom-face
       (lsp-ui-doc-background ((t (:background nil))))
       (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
       :bind (:map lsp-ui-mode-map
                   ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                   ([remap xref-find-references] . lsp-ui-peek-find-references)
                   ("C-c u" . lsp-ui-imenu))
       :custom
       (lsp-ui-doc-enable t)
       (lsp-ui-doc-header t)
       (lsp-ui-doc-include-signature t)
       (lsp-ui-doc-position 'top)
       (lsp-ui-doc-border (face-foreground 'default))
       (lsp-ui-sideline-enable nil)
       (lsp-ui-sideline-ignore-duplicate t)
       (lsp-ui-sideline-show-code-actions nil)
       :config
       ;; Use lsp-ui-doc-webkit only in GUI
       (setq lsp-ui-doc-use-webkit t)
       ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
       ;; https://github.com/emacs-lsp/lsp-ui/issues/243
       (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
         (setq mode-line-format nil)))
  #+END_SRC

* Company
  #+BEGIN_SRC emacs-lisp
     (use-package company
     :ensure t
     :config
     (setq company-idle-delay 0)
     (setq company-minimum-prefix-length 3)

     (global-company-mode t)
     )

     (use-package company-lsp
       :ensure t
       :config
     (setq compnay-lsp-enable-snippet t)
      (push 'company-lsp company-backends)
     )
   #+END_SRC

* Kubernetes context
  #+BEGIN_SRC emacs-lisp
    (setq custom-k8s-config "~/.kube/config")
    (setq custom-k8s-current-context "N/A")

    (defun custom-k8s-readlines ()
       (with-temp-buffer
         (insert-file-contents custom-k8s-config)
         (split-string (buffer-string) "\n" t)))

     (defun custom-k8s-get-context ()
       (mapcar
        'custom-k8s-matchline
               (custom-k8s-readlines)))

     (defun custom-k8s-matchline (line)
       (save-match-data
         (and (string-match "current-context: \\(.*\\)" line)
              (setq custom-k8s-current-context (match-string 1 line)))))


     (defun custom-k8s-context ()
       (interactive)
       (custom-k8s-get-context)
       (format "%s" custom-k8s-current-context)
       )

  #+END_SRC

* Modeline
  #+BEGIN_SRC emacs-lisp
    (require-package 'telephone-line)
    (require 'cl)

    (use-package telephone-line
       :ensure t
       :config
       (use-package telephone-line-utils)
       (use-package telephone-line-separators)
       (if window-system
           (setq telephone-line-primary-left-separator 'telephone-line-halfcos-left)
         (setq telephone-line-primary-right-separator 'telephone-line-cubed-right)
         )


       (use-package telephone-line-segments)


       (telephone-line-defsegment k8s-segment ()
         (format "k8s: %s" (custom-k8s-context))
         )

       (setq telephone-line-lhs
             '((evil   . (k8s-segment))
               (accent . (telephone-line-vc-segment
                          telephone-line-process-segment))
               (nil . (telephone-line-buffer-segment))))

       (telephone-line-mode 1)
       )
  #+END_SRC

* Go
  #+BEGIN_SRC emacs-lisp
    (require-package 'go-mode)
    (add-hook 'before-save-hook #'gofmt-before-save)
    (add-to-list 'exec-path (expand-file-name "~/go/bin/godef") )

    (let ((govet (flycheck-checker-get 'go-vet 'command)))
      (when (equal (cadr govet) "tool")
      (setf (cdr govet) (cddr govet))))
  #+END_SRC

* Ruby
#+BEGIN_SRC emacs-lisp
   (require-package 'ruby-mode)
   (require-package 'ruby-refactor)
   (require-package 'rubocop)
   (require-package 'exec-path-from-shell)
   (require-package 'rvm)

   (use-package rvm
     :init
     (rvm-use-default))
     (setq flycheck-ruby-rubocop-executable "~/bin/rubocop-shim")
   (use-package ruby-mode
     :init
     (defvar ruby-basic-offset 4)
     (add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch)
     (add-hook 'ruby-mode-hook (lambda () (hs-minor-mode)))
     (setq ruby-insert-encoding-magic-comment nil)
     ;; (add-hook 'ruby-mode-hook 'whitespace-mode)
     (eval-after-load "hideshow"
       '(add-to-list 'hs-special-modes-alist
                     `(ruby-mode
                       ,(rx (or "def" "class" "module" "do" "{" "[")) ; Block start
                       ,(rx (or "}" "]" "end"))                       ; Block end
                       ,(rx (or "#" "=begin"))                        ; comment start
                       ruby-forward-sexp nil)))
     )
   (global-set-key (kbd "C-h") 'hs-toggle-hiding)
#+END_SRC
* C modes
#+BEGIN_SRC emacs-lisp
   (defvar c-default-style "bsd")
   (defvar c-basic-offset 4)

   (defvar c++-mode-map)
   (defvar c++-auto-hungry-initial-state)
   (defvar c++-delete-function)
   (defvar c++-tab-always-indent)
   (defvar super-tab-mode)
   (defvar indent-tabs-mode)
   (defvar c-indent-level)
   (defvar c-continued-statement-offset)
   (defvar c++-empty-arglist-indent)

   (defun my-c++-mode-hook ()
     (define-key c++-mode-map "\C-m" 'reindent-then-newline-and-indent)
     (define-key c++-mode-map "\C-ce" 'c-comment-edit)
     (setq c++-auto-hungry-initial-state 'none)
     (setq c++-delete-function 'backward-delete-char)
     (setq c++-tab-always-indent t)
     (setq super-tab-mode t)
     (setq indent-tabs-mode nil)
     (setq c-indent-level 4)
     (setq c-continued-statement-offset 4)
     (setq c++-empty-arglist-indent 4)
     (c-set-style "stroustrup")
     )

   (defun my-objc-mode-hook ()
     (setq indent-tabs-mode nil)
     ;; (setq super-tab-mode t)
     ;; BSD-ish indentation style
     (setq c-indent-level 4)
     )


   (defvar c-mode-map)
   (defvar c-auto-hungry-initial-state)
   (defvar c-delete-function)
   (defvar c-tab-always-indent)
   (defvar super-tab-mode)
   (defvar c-indent-level)
   (defvar c-continued-statement-offset)
   (defvar c-brace-offset)
   (defvar c-argdecl-indent)
   (defvar c-label-offset)

   (defun my-c-mode-hook ()
     (setq tab-width 8)
     (setq indent-tabs-mode nil)
     (define-key c-mode-map "\C-m" 'reindent-then-newline-and-indent)
     (define-key c-mode-map "\C-ce" 'c-comment-edit)
     (setq c-auto-hungry-initial-state 'none)
     (setq c-delete-function 'backward-delete-char)
     (setq c-tab-always-indent t)
     (setq super-tab-mode t)
     ;; BSD-ish indentation style
     (setq c-indent-level 4)
     (setq c-continued-statement-offset 4)
     (setq c-brace-offset -4)
     (setq c-argdecl-indent 0)
     (setq c-label-offset -4)
     (c-set-style "stroustrup")
     )

   ;; Add all of the hooks...
   (add-hook 'c++-mode-hook 'my-c++-mode-hook)
   (add-hook 'c-mode-hook 'my-c-mode-hook)
   (add-hook 'objc-mode-hook 'my-objc-mode-hook)
   (add-hook 'c++-mode-hook 'show-ws-highlight-tabs)
   (add-hook 'c++-mode-hook 'show-ws-highlight-trailing-whitespace)
   (add-hook 'c-mode-hook 'show-ws-highlight-tabs)
   (add-hook 'c-mode-hook 'show-ws-highlight-trailing-whitespace)
   (add-hook 'objc-mode-hook 'show-ws-highlight-tabs)
   (add-hook 'objc-mode-hook 'show-ws-highlight-trailing-whitespace)

   ;; toggle between header and file:
   (add-hook 'c-mode-common-hook (lambda() (local-set-key (kbd "C-c o") 'ff-find-other-file)))


   ;; insert header guard
   (defun insert-header-guard ()
     (interactive)
     (if (string-match "\\.h\\(h\\|xx\\)?$" (buffer-name))
         (let ((header-guard
                (upcase (replace-regexp-in-string "[-.]" "_" (buffer-name)))))
           (save-excursion
             (goto-char (point-min))
             (insert "#ifndef " header-guard "_\n")
             (insert "# define " header-guard "_\n\n")
             (goto-char (point-max))
             (insert "\n#endif /* !" header-guard "_ */")))
       (message "Invalid C/C++ header file.")))

#+END_SRC
* Automodes
  #+BEGIN_SRC emacs-lisp

  (setq auto-mode-alist
      (append '(
                ("\\.cpp$"       . c++-mode)
                ("\\.cxx$"       . c++-mode)
                ("\\.hxx$"       . c++-mode)
                ("\\.hpp$"       . c++-mode)
                ("\\.h$"         . c-mode)
                ("\\.hh$"        . c++-mode)
                ("\\.idl$"       . c++-mode)
                ("\\.ipp$"       . c++-mode)
                ("\\.pp$"       . puppet-mode)
                ("\\.erl$"       . erlang-mode)
                ("\\.ex[s]?$"       . elixir-mode)
                ("\\.elixir$"       . elixir-mode)
                ("\\.c$"         . c-mode)
                ("\\.pl$"        . perl-mode)
                ("\\.pm$"        . perl-mode)
                ("\\.java$"      . java-mode)
                ("\\.js$"        . js-mode)
                ("\\.dot$"        . dot-mode)
                ("\\.inc$"       . php-mode)
                ("\\.php$"       . php-mode)
                ("\\.hs$"       . haskell-mode)
                ("\\.hi$"       . haskell-mode)
                ("\\.go$"       . go-mode)
                ("\\.groovy$"       . groovy-mode)
                ("\\.lhs$"       . haskell-mode)
                ("\\.ml[ily]?$" . tuareg-mode)
                ("\\.tf" . terraform-mode)
                ("\\.topml$" . tuareg-mode)
                ("\\.txt$"       . text-mode)
                ("\\.http$"       . restclient-mode)
                ("\\.rb$"        . ruby-mode)
                ("\\.rbw$"       . ruby-mode)
                ("\\.yaml$"        . yaml-mode)
                ("\\.yml$"       . yaml-mode)
                ("\\.sql$"       . sql-mode)
                ("\\.rake$"       . ruby-mode)
                ("\\Rakefile$"    . ruby-mode)
                ("\\spec.rb$"    . rspec-mode)
                ("\\.feature$"   . cucumber-mode)
                ("\\.el$"   . lisp-mode)
                ("\\.html$" . web-mode)
                ("\\.*nginx.*\.conf$" . nginx-mode)
                ("\\.conf$" . conf-mode)
                ("\\.rhtml$"      . web-mode)
                ("\\.erb$"      . web-mode)
                ("\\.css$"       . css-mode)
                ("\\.occ$"       . occam-mode)
                ("\\.scsh$"      . scheme-mode)
                ("\\.m$"         . objc-mode)
                ("\\TODO$"         . org-mode)
                ("\\.org$"         . org-mode)
                ("\\.mm$"         . objc-mode)
                ("\\.md$"         . markdown-mode)
                ("\\.MD$"         . markdown-mode)
                ("\\.feature$"    . feature-mode)
                ("\\.markdown$"         . markdown-mode))
              auto-mode-alist))

              (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)

  #+END_SRC
* Fun
 #+BEGIN_SRC emacs-lisp

   (defun move-line-up ()
     "Move up the current line."
     (interactive)
     (transpose-lines 1)
     (forward-line -2)
     (indent-according-to-mode))

   (defun move-line-down ()
     "Move down the current line."
     (interactive)
     (forward-line 1)
     (transpose-lines 1)
     (forward-line -1)
     (indent-according-to-mode))

   (global-set-key [(control shift up)]  'move-line-up)
   (global-set-key [(control shift down)]  'move-line-down)
   ;; moving and indenting
   (defun move-region (start end n)
     "Move the current region up or down by N lines."
     (interactive "r\np")
     (let ((line-text (delete-and-extract-region start end)))
       (forward-line n)
       (let ((start (point)))
         (insert line-text)
         (setq deactivate-mark nil)
         (set-mark start))))

   (defun move-region-up (start end n)
     "Move the current line up by N lines."
     (interactive "r\np")
     (move-region start end (if (null n) -1 (- n))))

   (defun move-region-down (start end n)
     "Move the current line down by N lines."
     (interactive "r\np")
     (move-region start end (if (null n) 1 n)))


   (defun iwb ()
     "indent whole buffer"
     (interactive)
     (delete-trailing-whitespace)
     (indent-region (point-min) (point-max) nil)
     (untabify (point-min) (point-max))
     )

 #+END_SRC
