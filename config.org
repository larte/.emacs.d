#+title: DoomEmacs Config

* About

That's it, going back to doom.

#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

* Theme


#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-dark+)
#+END_SRC

* Personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "larte"
      user-email-address "lauri.arte@gmail.com"
      )
#+END_SRC

* Settings

Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)

;; Disable confirm messages
(setq confirm-kill-emacs nil)
#+END_SRC


* Programming

#+BEGIN_SRC emacs-lisp
(setq-default
 js-indent-level 2
 typescript-indent-level 2
        )

#+END_SRC

** Go-mode

Mostly just switch between test and implementation. One could also just use `projectile-toggle-between-implementation-and-test`.

#+BEGIN_SRC emacs-lisp
(defun larte/go-toggle-file-and-test ()
  (interactive)
  (setq ff-search-directories '(".")
        ff-other-file-alist '(("_test\\.go$" (".go"))
                             ("\\.go$" ("_test.go"))))
   (ff-find-other-file)
  )
(map! :map go-mode-map
      "C-x C-l" #'larte/go-toggle-file-and-test
      "C-x x" #'go-run
      "C-x p" #'go-test-current-project
      "C-x t" #'go-test-current-test
      "C-x f" #'go-test-current-file
        )
#+END_SRC



** Copilot

#+BEGIN_SRC emacs-lisp
;; accept completion from copilot and fallback to company        )
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
#+END_SRC


* Keybindings

#+BEGIN_SRC emacs-lisp
(map!
        "<f1>" #'+treemacs/toggle
        "C-c C-c"  #'comment-or-uncomment-region
 )
#+END_SRC
