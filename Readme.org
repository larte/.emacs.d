#+TITLE: Emacs configurations
#+AUTHOR: larte
#+PROPERTY: header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link

Doom, without being evil.

* Basics
#+BEGIN_SRC emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC

** Personal Information
It's useful to have some basic personal information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "larte"
      user-mail-address "lauri.arte@gmail.com")

#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-acario-light)
(load-theme 'doom-dark+ t)

(setq doom-font (font-spec :family "Input Mono Narrow" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Fira Sans") ; inherits \deltaoom-font''s :size
      doom-unicode-font (font-spec :family "Input Mono Narrow" :size 12)
      doom-big-font (font-spec :family "Fira Mono" :size 19))

#+END_SRC

** Defaults
***
#+BEGIN_SRC emacs-lisp
(setq
 js-indent-level 2
 typescript-indent-level 2
)
#+END_SRC
*** Pretty symbols in code
I like these disabled

#+BEGIN_SRC emacs-lisp
(setq +pretty-code-enabled-modes nil)
(remove-hook 'after-change-major-mode-hook #'+pretty-code-init-pretty-symbols-h)
#+END_SRC

*** ibuffer
#+BEGIN_SRC emacs-lisp
(autoload 'ibuffer "ibuffer" "List buffers." t)

(define-key global-map [(control b)] 'ibuffer)
#+END_SRC
*** Customizations
#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

*** Splash screen

This leached from https://github.com/tecosaur/emacs-config

#+BEGIN_SRC emacs-lisp
(setq fancy-splash-image (concat doom-private-dir "splash.png"))
#+END_SRC
* Language things

** Go-mode
 #+BEGIN_SRC emacs-lisp
  (defun go-switch-other-file ()
    (interactive)
    (setq ff-search-directories '(".")
          ff-other-file-alist '(("_test\\.go$" (".go"))
                               ("\\.go$" ("_test.go"))))
     (ff-find-other-file)
     )

   (map! :map go-mode-map
        "C-x C-l" #'go-switch-other-file
        "C-x x" #'go-run
        "C-x p" #'go-test-current-project
        "C-x t" #'go-test-current-test
        "C-x f" #'go-test-current-file
    )
#+END_SRC
** Typescript
#+BEGIN_SRC emacs-lisp
(use-package! typescript-mode)
(use-package! tide
    :ensure t
      :after (typescript-mode company flycheck)
        :init (setq tide-format-options '(:indentSize 2 :tabSize 2))
          :hook ((typescript-mode . tide-setup)
                          (typescript-mode . tide-hl-identifier-mode)
                                   (before-save . tide-format-before-save)))
(use-package! graphql-mode)
#+END_SRC
